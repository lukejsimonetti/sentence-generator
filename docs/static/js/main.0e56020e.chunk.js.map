{"version":3,"sources":["components/context/WordAPIContext.js","components/context/AppStateContext.js","components/GlobalProvider.js","components/misc/data.js","components/form/WordTypesDropdown.js","components/helper/TooltipHelper.js","GeneratorForm.js","SentencePreview.js","App.js","serviceWorker.js","index.js"],"names":["WordAPIContext","React","createContext","dictionary","adjective","adverb","article","conjuction","interjection","noun","verb","memo","props","_useState","useState","_useState2","Object","slicedToArray","wordState","setWordState","_useState3","_useState4","wordCount","setWordCount","_useState5","_useState6","preview","setPreview","react_default","a","createElement","Provider","value","generateWord","type","callback","setTimeout","sample","Math","random","getRandomWordFromAPI","children","AppStateContext","isSubmitting","setIsSubmitting","context_AppStateContext","context_WordAPIContext","wordTypes","label","Select","propTypes","input","PropTypes","object","initialValue","index","number","meta","_ref","onChange","Fragment","react_select_esm","e","defaultValue","options","error","touched","className","TooltipHelper","placement","text","OverlayTrigger","overlay","Tooltip","id","_useContext","useContext","_useContext2","react_final_form_es","onSubmit","values","arguments","length","undefined","dynamic_word_types","randomWords","map","v","Promise","resolve","all","then","words","word","generate","initialValues","keepDirtyOnReinitialize","mutators","objectSpread","arrayMutators","render","_ref$form$mutators","form","push","pop","handleSubmit","pristine","Form","Row","react_final_form_arrays_es","name","_ref2","fields","Col","md","key","validate","concat","_ref3","form_WordTypesDropdown","assign","ButtonGroup","TooltipHelper_TooltipHelper","Button","variant","onClick","disabled","i","SentencePreview","useEffect","buildPreview","newWord","isFirstWord","upperCase","isLastWord","addExclamation","charAt","toUpperCase","slice","split","placeholder","style","position","top","left","App","components_GlobalProvider","Container","Card","Header","as","Body","src_GeneratorForm","src_SentencePreview","href","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e56020e.chunk.js","sourcesContent":["import React, { memo, useState } from 'react'\nimport {sample} from 'lodash'\n\nexport const WordAPIContext = React.createContext({})\n\n//simulated api \nvar dictionary = {\n    adjective: ['bogus', 'boss', 'gnarlatious', 'hairy', 'outrageous', 'rad', 'stoked'],\n    adverb: ['bogusly', 'gnarlatiously', 'tubularly'],\n    article: ['a', 'the'],\n    conjuction: ['and', 'but'],\n    interjection: ['banzai', 'cowabunga'],\n    noun: ['barrel', 'bro', 'bummer', 'dude', 'green room', 'honker', 'neptune cocktail', 'surfari'],\n    verb: ['bailed out', 'maxed out', 'shredded', 'tubed', 'wiped out']\n  };\n\n  // don't edit below this line!\n  const getRandomWordFromAPI = (type, callback) => {\n    return setTimeout(function() {\n      callback(\n        type in dictionary ?\n        sample(dictionary[type]) :\n        null\n      );\n    }, (Math.random() * 750 + 250));\n  }\n\nconst WordAPIProvider = props => {\n\n    const [wordState, setWordState] = useState([])\n    const [wordCount, setWordCount] = useState(0)\n    const [preview, setPreview] = useState(\"\")\n\n    const generateWord = (type, callback) => {\n        //simulated xhr request\n        return getRandomWordFromAPI(type, callback)\n    }\n\n    return <WordAPIContext.Provider \n        value={{ wordState, setWordState, wordCount, setWordCount, generateWord, preview, setPreview}}>\n        {props.children}\n    </WordAPIContext.Provider>\n}\n\nexport default memo(WordAPIProvider)\n","import React, { memo, useState } from 'react'\n\nexport const AppStateContext = React.createContext({})\n\nconst AppStateProvider = props => {\n\n    const [isSubmitting, setIsSubmitting] = useState(false)\n\n    return <AppStateContext.Provider value={{ isSubmitting, setIsSubmitting }}>\n        {props.children}\n    </AppStateContext.Provider>\n}\n\nexport default memo(AppStateProvider)\n","\nimport React, { memo } from 'react'\n\nimport WordAPIProvider from './context/WordAPIContext'\nimport AppStateProvider from './context/AppStateContext'\n\nconst GlobalProvider = props => {\n\n    return (\n        <AppStateProvider>\n            <WordAPIProvider>\n                {props.children}\n            </WordAPIProvider>\n        </AppStateProvider>\n    )\n}\n\nexport default memo(GlobalProvider)\n","export const wordTypes = [\n    {label: 'adjective', value: 'adjective'},\n    {label: 'adverb', value: 'adverb'},\n    {label: 'article', value: 'article'},\n    {label: 'conjuction', value: 'conjuction'},\n    {label: 'interjection', value: 'interjection'},\n    {label: 'noun', value: 'noun'},\n    {label: 'verb', value: 'verb'}\n  ]","import React, { memo } from 'react';\nimport Select from 'react-select'\nimport PropTypes from 'prop-types'\nimport { wordTypes } from '../misc/data'\n\nconst WordTypesDropdown = ({ onChange, initialValue, index, meta }) => {\n    return (\n        <>\n            <Select\n                onChange={e => onChange(e)}\n                defaultValue={(index === 0) ? initialValue : \"\"}\n                options={wordTypes}\n            />\n            {meta.error && meta.touched && <span className=\"text text-danger\">{meta.error}</span>}\n        </>\n    );\n};\n\nSelect.propTypes = {\n    input: PropTypes.object,\n    initialValue: PropTypes.object,\n    index: PropTypes.number,\n    meta: PropTypes.object\n};\n\nexport default memo(WordTypesDropdown);","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nexport const TooltipHelper = ({children, placement, text}) => {\n    return (\n        <OverlayTrigger\n            placement={placement}\n            overlay={\n                <Tooltip id={text}>{text}</Tooltip>\n            }\n        >\n        {children}\n        </OverlayTrigger>\n    )\n}\n\nTooltipHelper.propTypes = {\n    children: PropTypes.object,\n    placement: PropTypes.string,\n    text: PropTypes.string\n}","import React, { memo, useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form'\nimport arrayMutators from 'final-form-arrays'\nimport { FieldArray } from 'react-final-form-arrays'\nimport { Form, Button, ButtonGroup, Row, Col } from 'react-bootstrap'\n\nimport WordTypesDropdown from './components/form/WordTypesDropdown'\nimport { wordTypes } from './components/misc/data'\nimport { TooltipHelper } from './components/helper/TooltipHelper'\nimport { WordAPIContext } from './components/context/WordAPIContext'\nimport { AppStateContext } from './components/context/AppStateContext'\n\nconst GeneratorForm = () => {\n    const { setWordState, setWordCount, generateWord, setPreview } = useContext(WordAPIContext)\n    const { isSubmitting, setIsSubmitting } = useContext(AppStateContext)\n\n    const generate = (formValues = []) => {\n        const values = formValues.dynamic_word_types\n        setWordCount(values.length)\n        setWordState([])\n        setPreview(\"\")\n        setIsSubmitting(true)\n\n        const randomWords = values.map(v => {\n            return new Promise((resolve) => {\n                generateWord(v.value, resolve)\n            });\n        });\n\n        Promise.all(randomWords)\n            .then(words =>\n                 words.map((word) => {\n                   return setWordState(word)\n                })\n            )\n    }\n\n    const stop = () => {\n\n    }\n\n    return (\n        <div>\n            <FinalForm\n                onSubmit={(e) => generate(e)}\n                initialValues={{ 'dynamic_word_types': [wordTypes[0]] }}\n                keepDirtyOnReinitialize={true}\n                mutators={{\n                    ...arrayMutators\n                }}\n                render={({ form: { mutators: { push, pop } }, handleSubmit, pristine, values }) => (\n                    <Form onSubmit={handleSubmit}>\n                        <Row className=\"mb-3\">\n                            <FieldArray name=\"dynamic_word_types\">\n                                {({ fields }) =>\n                                    fields.map((name, index) => (\n                                        <Col md={2} key={name}>\n                                            <Field\n                                                validate={value => (value ? undefined : \"Required\")}\n                                                name={`${name}`}\n                                                label=\"Word Type\"\n                                                render={({ input, meta }) => (\n                                                    <WordTypesDropdown\n                                                        {...input}\n                                                        meta={meta}\n                                                        initialValue={wordTypes[0]}\n                                                        index={index}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    ))}\n                            </FieldArray>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col md={2}>\n                                <ButtonGroup>\n                                    <TooltipHelper placement=\"bottom\" text=\"Add Word Type\">\n                                        <Button variant=\"outline-success\" onClick={() => push('dynamic_word_types')}>\n                                            <i className=\"fa fa-plus\" />\n                                        </Button>\n                                    </TooltipHelper>\n                                    <TooltipHelper placement=\"bottom\" text=\"Remove Last Word Type\">\n                                        <Button variant=\"outline-danger\" onClick={() => pop('dynamic_word_types')}>\n                                            <i className=\"fa fa-minus\" />\n                                        </Button>\n                                    </TooltipHelper>\n                                </ButtonGroup>\n                            </Col>\n                            <Col md={2}>\n                                <ButtonGroup>\n                                    <TooltipHelper placement=\"bottom\" text=\"Generate Sentence!\">\n                                        <Button\n                                            disabled={isSubmitting}\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                        >\n                                            <i className=\"fa fa-play\" />\n                                        </Button>\n                                    </TooltipHelper>\n                                    <TooltipHelper placement=\"bottom\" text=\"Stop Generation\">\n                                        <Button variant=\"danger\" onClick={() => stop()}>\n                                            <i className=\"fa fa-stop\" />\n                                        </Button>\n                                    </TooltipHelper>\n                                    <TooltipHelper placement=\"bottom\" text=\"Clear Word Types\">\n                                        <Button variant=\"primary\"\n                                            onClick={() => {\n                                                for (var i = 1; i < values.dynamic_word_types.length; i++) {\n                                                    pop('dynamic_word_types')\n                                                }\n                                            }}\n                                            disabled={isSubmitting || pristine}>\n                                            <i className=\"fa fa-undo\" />\n                                        </Button>\n                                    </TooltipHelper>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                    </Form>\n                )}\n            />\n\n        </div>\n    );\n};\n\nexport default memo(GeneratorForm);","import React, { useContext, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap'\nimport { WordAPIContext } from './components/context/WordAPIContext'\nimport { AppStateContext } from './components/context/AppStateContext'\n\nconst SentencePreview = () => {\n\n    const { wordState, wordCount, preview, setPreview} = useContext(WordAPIContext)\n    const { isSubmitting, setIsSubmitting } = useContext(AppStateContext)\n\n    useEffect(() => {\n        buildPreview()\n    }, [wordState])\n\n    const buildPreview = () => {\n        let newWord = wordState\n        if (newWord.length === 0) return\n        if(typeof newWord !== \"string\") return\n\n        if (isFirstWord()) {\n            newWord = upperCase(newWord)\n        }\n        if(isLastWord()){\n            newWord = addExclamation(newWord)\n        }\n        let newPreview = preview + \" \" + newWord\n\n        setPreview(newPreview)\n        setIsSubmitting(false)\n    }\n    \n    const upperCase = (word) => {\n        return word.charAt(0).toUpperCase() + word.slice(1)\n    }\n\n    const addExclamation = (word) => {\n        return word += \"!\"\n    }\n\n    const isFirstWord = () => {\n        return (preview.length === 0) ? true : false\n    }\n\n    const isLastWord = () => {\n        return (preview.split(' ').length === (wordCount)) ? true : false\n    }\n\n    return (\n        <Row>\n            <Col md={12}>\n                <input\n                    id=\"canvas\"\n                    className=\"form-control\"\n                    type=\"text\"\n                    value={preview}\n                    placeholder={isSubmitting ? \"\" : \"Put your primo sentence here.\"}\n                    disabled\n                />\n               {isSubmitting \n                && <i className=\"fa fa-spin fa-spinner\" style={{position: 'absolute', top: 10, left: -3}} />}\n            </Col>\n        </Row>\n    );\n};\n\nexport default SentencePreview;","import React from 'react';\nimport { Card, Container } from 'react-bootstrap'\n\nimport GlobalProvider from './components/GlobalProvider'\n\nimport GeneratorForm from './GeneratorForm'\nimport SentencePreview from './SentencePreview'\n\nconst App = props => {\n  return (\n    <GlobalProvider>\n      <div className=\"App\">\n        <Container className=\"mt-4\">\n          <Card>\n            <Card.Header as=\"h1\" className=\"text-center\">Surf's Up! <i className=\"fa fa-hand-rock-o\"/></Card.Header>\n            <Card.Body>\n              <h4>Select a word type:</h4>\n              <GeneratorForm />\n              <SentencePreview />\n            </Card.Body>\n          </Card>\n\n          <br />\n          <br />\n          <br />\n          <h2>Instructions:</h2>\n          <ul>\n            <li><strong>Resources:</strong> <a href=\"https://lodash.com/\">Lodash</a> (feel free to pull in others)</li>\n            <li>The goal is to allow the user to generate a surfer sentence.</li>\n            <li>The user should be able to control the number of words in the sentence by adding and removing dropdowns. The user should be able to control the types of words in the sentence by changing the value of the dropdowns.</li>\n            <li><strong>Example:</strong> (article) (adjective) (noun) could generate \"The boss surfari!\" or \"A bogus barrel!\"</li>\n\n            <li><strong>Your task:</strong> Wire up the interface\n            <ul>\n                <li>The \"+\" button should append a dropdown.</li>\n                <li>The \"-\" button should remove the last dropdown.</li>\n                <li>The \"Go\" button should generate the sentence in the provided space. Each word should be displayed in the correct order as it is loaded from the simulated API. The first word should be capitalized. The sentence should end with an exclamation\n                  point.\n                </li>\n                <li>The \"Stop\" button should end sentence generation, but leave the portion of the sentence already displayed.</li>\n                <li>Display a loading indicator within the sentence when a request is issued to the API and replace it with the resulting response.</li>\n                <li>Put your style on it!</li>\n              </ul>\n            </li>\n          </ul>\n        </Container>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}